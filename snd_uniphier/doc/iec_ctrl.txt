static int iec_ctl_info(struct snd_kcontrol *kcontrol,
			struct snd_ctl_elem_info *uinfo)
{
	uinfo->type = SNDRV_CTL_ELEM_TYPE_IEC958;
	uinfo->count = 1;

	return 0;
}

static int iec_ctl_get(struct snd_kcontrol *kcontrol,
		       struct snd_ctl_elem_value *ucontrol)
{
	struct snd_soc_dai *dai = snd_kcontrol_chip(kcontrol);
	struct uniphier_aio *aio = uniphier_priv(dai);

	mutex_lock(&aio->lock);
	ucontrol->value.iec958.status[0] = aio->iec_status[0];
	ucontrol->value.iec958.status[1] = aio->iec_status[1];
	ucontrol->value.iec958.status[2] = aio->iec_status[2];
	ucontrol->value.iec958.status[3] = aio->iec_status[3];
	mutex_unlock(&aio->lock);

	return 0;
}

static int iec_ctl_put(struct snd_kcontrol *kcontrol,
		       struct snd_ctl_elem_value *ucontrol)
{
	struct snd_soc_dai *dai = snd_kcontrol_chip(kcontrol);
	struct uniphier_aio *aio = uniphier_priv(dai);

	mutex_lock(&aio->lock);
	aio->iec_status[0] = ucontrol->value.iec958.status[0];
	aio->iec_status[1] = ucontrol->value.iec958.status[1];
	aio->iec_status[2] = ucontrol->value.iec958.status[2];
	aio->iec_status[3] = ucontrol->value.iec958.status[3];

	if (aio->iec_status[0] & 0x40)
		/* non PCM */
		aio->pass_through = 1;
	else
		/* PCM */
		aio->pass_through = 0;
	mutex_unlock(&aio->lock);

	return 0;
}

static struct snd_kcontrol_new unipher_iec_ctls[] = {
	{
		.iface = SNDRV_CTL_ELEM_IFACE_PCM,
		.name  = SNDRV_CTL_NAME_IEC958("", PLAYBACK, DEFAULT),
		.info  = iec_ctl_info,
		.get   = iec_ctl_get,
		.put   = iec_ctl_put,
	},
};

int iec_dai_probe(struct snd_soc_dai *dai)
{
	int ret;

	ret = aio_cmn_dai_probe(dai);
	if (ret < 0)
		return ret;

	return snd_soc_add_dai_controls(dai,
		unipher_iec_ctls, ARRAY_SIZE(unipher_iec_ctls));
}
